<templateSet group="WordPress">
  <template name="funcasset" value="/**&#10; * Easy path to theme's assets dir.&#10; *&#10; * @return string&#10; */&#10;function asset($path = null)&#10;{&#10;  echo get_template_directory_uri() . &quot;/assets&quot;.$path;&#10;}" description="Shortened function to provide URLS to Theme Assets" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="asset" value="&lt;?php asset(); ?&gt;" description="Asset function shortcut" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="wpquery" value="$$args = [&#10;    'post_type' =&gt; 'post',&#10;    'posts_per_page' =&gt; 5,&#10;];&#10;$$$POSTS$ = new WP_Query();&#10;$$$POSTS$-&gt;query($$args);&#10;while ($$$POSTS$-&gt;have_posts()) : $$$POSTS$-&gt;the_post();&#10;$END$&#10;endwhile;" description="New WP_Query" toReformat="true" toShortenFQNames="true">
    <variable name="POSTS" expression="" defaultValue="recentPosts" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="wpmigrate" value="UPDATE $PREFIX$_options SET option_value = replace(option_value, 'http://$OLD$', 'http://$NEW$') WHERE option_name = 'home' OR option_name = 'siteurl';&#10;UPDATE $PREFIX$_posts SET guid = replace(guid, 'http://$OLD$','http://$NEW$);&#10;UPDATE $PREFIX$_posts SET post_content = replace(post_content, 'http://$OLD$', 'http://$NEW$');" description="SQL Migration" toReformat="true" toShortenFQNames="true">
    <variable name="PREFIX" expression="" defaultValue="&quot;wp&quot;" alwaysStopAt="false" />
    <variable name="OLD" expression="" defaultValue="&quot;www.old-domain.com&quot;" alwaysStopAt="false" />
    <variable name="NEW" expression="" defaultValue="&quot;www.new-domain.com&quot;" alwaysStopAt="false" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="widgetbp" value="/**&#10; * WordPress Widget Boilerplate&#10; *&#10; * The WordPress Widget Boilerplate is an organized, maintainable boilerplate for building widgets using WordPress best practices.&#10; *&#10; * @package   Widget_Name&#10; * @author    Your Name &lt;email@example.com&gt;&#10; * @license   GPL-2.0+&#10; * @link      http://example.com&#10; * @copyright 2014 Your Name or Company Name&#10; *&#10; * @wordpress-plugin&#10; * Plugin Name:       @TODO&#10; * Plugin URI:        @TODO&#10; * Description:       @TODO&#10; * Version:           1.0.0&#10; * Author:            @TODO&#10; * Author URI:        @TODO&#10; * Text Domain:       widget-name&#10; * License:           GPL-2.0+&#10; * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt&#10; * Domain Path:       /lang&#10; * GitHub Plugin URI: https://github.com/&lt;owner&gt;/&lt;repo&gt;&#10; */&#10; &#10; // Prevent direct file access&#10;if ( ! defined ( 'ABSPATH' ) ) {&#10;&#9;exit;&#10;}&#10;&#10;// TODO: change 'Widget_Name' to the name of your plugin&#10;class Widget_Name extends WP_Widget {&#10;&#10;    /**&#10;     * @TODO - Rename &quot;widget-name&quot; to the name your your widget&#10;     *&#10;     * Unique identifier for your widget.&#10;     *&#10;     *&#10;     * The variable name is used as the text domain when internationalizing strings&#10;     * of text. Its value should match the Text Domain file header in the main&#10;     * widget file.&#10;     *&#10;     * @since    1.0.0&#10;     *&#10;     * @var      string&#10;     */&#10;    protected $widget_slug = 'widget-name';&#10;&#10;&#9;/*--------------------------------------------------*/&#10;&#9;/* Constructor&#10;&#9;/*--------------------------------------------------*/&#10;&#10;&#9;/**&#10;&#9; * Specifies the classname and description, instantiates the widget,&#10;&#9; * loads localization files, and includes necessary stylesheets and JavaScript.&#10;&#9; */&#10;&#9;public function __construct() {&#10;&#10;&#9;&#9;// load plugin text domain&#10;&#9;&#9;add_action( 'init', array( $this, 'widget_textdomain' ) );&#9;&#9;&#10;&#10;&#9;&#9;// TODO: update description&#10;&#9;&#9;parent::__construct(&#10;&#9;&#9;&#9;$this-&gt;get_widget_slug(),&#10;&#9;&#9;&#9;__( 'Widget Name', $this-&gt;get_widget_slug() ),&#10;&#9;&#9;&#9;array(&#10;&#9;&#9;&#9;&#9;'classname'  =&gt; $this-&gt;get_widget_slug().'-class',&#10;&#9;&#9;&#9;&#9;'description' =&gt; __( 'Short description of the widget goes here.', $this-&gt;get_widget_slug() )&#10;&#9;&#9;&#9;)&#10;&#9;&#9;);&#10;&#10;&#9;&#9;// Register admin styles and scripts&#10;&#9;&#9;add_action( 'admin_print_styles', array( $this, 'register_admin_styles' ) );&#10;&#9;&#9;add_action( 'admin_enqueue_scripts', array( $this, 'register_admin_scripts' ) );&#10;&#10;&#9;&#9;// Register site styles and scripts&#10;&#9;&#9;add_action( 'wp_enqueue_scripts', array( $this, 'register_widget_styles' ) );&#10;&#9;&#9;add_action( 'wp_enqueue_scripts', array( $this, 'register_widget_scripts' ) );&#10;&#10;&#9;&#9;// Refreshing the widget's cached output with each new post&#10;&#9;&#9;add_action( 'save_post',    array( $this, 'flush_widget_cache' ) );&#10;&#9;&#9;add_action( 'deleted_post', array( $this, 'flush_widget_cache' ) );&#10;&#9;&#9;add_action( 'switch_theme', array( $this, 'flush_widget_cache' ) );&#10;&#10;&#9;} // end constructor&#10;&#10;&#10;    /**&#10;     * Return the widget slug.&#10;     *&#10;     * @since    1.0.0&#10;     *&#10;     * @return    Plugin slug variable.&#10;     */&#10;    public function get_widget_slug() {&#10;        return $this-&gt;widget_slug;&#10;    }&#10;&#10;&#9;/*--------------------------------------------------*/&#10;&#9;/* Widget API Functions&#10;&#9;/*--------------------------------------------------*/&#10;&#10;&#9;/**&#10;&#9; * Outputs the content of the widget.&#10;&#9; *&#10;&#9; * @param array args  The array of form elements&#10;&#9; * @param array instance The current instance of the widget&#10;&#9; */&#10;&#9;public function widget( $args, $instance ) {&#10;&#10;&#9;&#9;&#10;&#9;&#9;// Check if there is a cached output&#10;&#9;&#9;$cache = wp_cache_get( $this-&gt;get_widget_slug(), 'widget' );&#10;&#10;&#9;&#9;if ( !is_array( $cache ) )&#10;&#9;&#9;&#9;$cache = array();&#10;&#10;&#9;&#9;if ( ! isset ( $args['widget_id'] ) )&#10;&#9;&#9;&#9;$args['widget_id'] = $this-&gt;id;&#10;&#10;&#9;&#9;if ( isset ( $cache[ $args['widget_id'] ] ) )&#10;&#9;&#9;&#9;return print $cache[ $args['widget_id'] ];&#10;&#9;&#9;&#10;&#9;&#9;// go on with your widget logic, put everything into a string and â€¦&#10;&#10;&#10;&#9;&#9;extract( $args, EXTR_SKIP );&#10;&#10;&#9;&#9;$widget_string = $before_widget;&#10;&#10;&#9;&#9;// TODO: Here is where you manipulate your widget's values based on their input fields&#10;&#9;&#9;ob_start();&#10;&#9;&#9;include( plugin_dir_path( __FILE__ ) . 'views/widget.php' );&#10;&#9;&#9;$widget_string .= ob_get_clean();&#10;&#9;&#9;$widget_string .= $after_widget;&#10;&#10;&#10;&#9;&#9;$cache[ $args['widget_id'] ] = $widget_string;&#10;&#10;&#9;&#9;wp_cache_set( $this-&gt;get_widget_slug(), $cache, 'widget' );&#10;&#10;&#9;&#9;print $widget_string;&#10;&#10;&#9;} // end widget&#10;&#9;&#10;&#9;&#10;&#9;public function flush_widget_cache() &#10;&#9;{&#10;    &#9;wp_cache_delete( $this-&gt;get_widget_slug(), 'widget' );&#10;&#9;}&#10;&#9;/**&#10;&#9; * Processes the widget's options to be saved.&#10;&#9; *&#10;&#9; * @param array new_instance The new instance of values to be generated via the update.&#10;&#9; * @param array old_instance The previous instance of values before the update.&#10;&#9; */&#10;&#9;public function update( $new_instance, $old_instance ) {&#10;&#10;&#9;&#9;$instance = $old_instance;&#10;&#10;&#9;&#9;// TODO: Here is where you update your widget's old values with the new, incoming values&#10;&#10;&#9;&#9;return $instance;&#10;&#10;&#9;} // end widget&#10;&#10;&#9;/**&#10;&#9; * Generates the administration form for the widget.&#10;&#9; *&#10;&#9; * @param array instance The array of keys and values for the widget.&#10;&#9; */&#10;&#9;public function form( $instance ) {&#10;&#10;&#9;&#9;// TODO: Define default values for your variables&#10;&#9;&#9;$instance = wp_parse_args(&#10;&#9;&#9;&#9;(array) $instance&#10;&#9;&#9;);&#10;&#10;&#9;&#9;// TODO: Store the values of the widget in their own variable&#10;&#10;&#9;&#9;// Display the admin form&#10;&#9;&#9;include( plugin_dir_path(__FILE__) . 'views/admin.php' );&#10;&#10;&#9;} // end form&#10;&#10;&#9;/*--------------------------------------------------*/&#10;&#9;/* Public Functions&#10;&#9;/*--------------------------------------------------*/&#10;&#10;&#9;/**&#10;&#9; * Loads the Widget's text domain for localization and translation.&#10;&#9; */&#10;&#9;public function widget_textdomain() {&#10;&#10;&#9;&#9;// TODO be sure to change 'widget-name' to the name of *your* plugin&#10;&#9;&#9;load_plugin_textdomain( $this-&gt;get_widget_slug(), false, plugin_dir_path( __FILE__ ) . 'lang/' );&#10;&#10;&#9;} // end widget_textdomain&#10;&#10;&#9;/**&#10;&#9; * Fired when the plugin is activated.&#10;&#9; *&#10;&#9; * @param  boolean $network_wide True if WPMU superadmin uses &quot;Network Activate&quot; action, false if WPMU is disabled or plugin is activated on an individual blog.&#10;&#9; */&#10;&#9;public static function activate( $network_wide ) {&#10;&#9;&#9;// TODO define activation functionality here&#10;&#9;} // end activate&#10;&#10;&#9;/**&#10;&#9; * Fired when the plugin is deactivated.&#10;&#9; *&#10;&#9; * @param boolean $network_wide True if WPMU superadmin uses &quot;Network Activate&quot; action, false if WPMU is disabled or plugin is activated on an individual blog&#10;&#9; */&#10;&#9;public static function deactivate( $network_wide ) {&#10;&#9;&#9;// TODO define deactivation functionality here&#10;&#9;} // end deactivate&#10;&#10;&#9;/**&#10;&#9; * Registers and enqueues admin-specific styles.&#10;&#9; */&#10;&#9;public function register_admin_styles() {&#10;&#10;&#9;&#9;wp_enqueue_style( $this-&gt;get_widget_slug().'-admin-styles', plugins_url( 'css/admin.css', __FILE__ ) );&#10;&#10;&#9;} // end register_admin_styles&#10;&#10;&#9;/**&#10;&#9; * Registers and enqueues admin-specific JavaScript.&#10;&#9; */&#10;&#9;public function register_admin_scripts() {&#10;&#10;&#9;&#9;wp_enqueue_script( $this-&gt;get_widget_slug().'-admin-script', plugins_url( 'js/admin.js', __FILE__ ), array('jquery') );&#10;&#10;&#9;} // end register_admin_scripts&#10;&#10;&#9;/**&#10;&#9; * Registers and enqueues widget-specific styles.&#10;&#9; */&#10;&#9;public function register_widget_styles() {&#10;&#10;&#9;&#9;wp_enqueue_style( $this-&gt;get_widget_slug().'-widget-styles', plugins_url( 'css/widget.css', __FILE__ ) );&#10;&#10;&#9;} // end register_widget_styles&#10;&#10;&#9;/**&#10;&#9; * Registers and enqueues widget-specific scripts.&#10;&#9; */&#10;&#9;public function register_widget_scripts() {&#10;&#10;&#9;&#9;wp_enqueue_script( $this-&gt;get_widget_slug().'-script', plugins_url( 'js/widget.js', __FILE__ ), array('jquery') );&#10;&#10;&#9;} // end register_widget_scripts&#10;&#10;} // end class&#10;&#10;// TODO: Remember to change 'Widget_Name' to match the class name definition&#10;add_action( 'widgets_init', create_function( '', 'register_widget(&quot;Widget_Name&quot;);' ) );&#10;&#10;// Hooks fired when the Widget is activated and deactivated&#10;// TODO: Remember to change 'Widget_Name' to match the class name definition&#10;register_activation_hook( __FILE__, array( 'Widget_Name', 'activate' ) );&#10;register_deactivation_hook( __FILE__, array( 'Widget_Name', 'deactivate' ) );" description="Widget Boilerplate" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>